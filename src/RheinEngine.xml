<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RheinEngine</name>
    </assembly>
    <members>
        <member name="T:Rhein.Charting.ChartParser">
            <summary>
            Used to parse <see cref="!:Chart"/>s.
            </summary>
        </member>
        <member name="F:Rhein.Charting.ChartParser.Header">
            <summary>
            The header at the top of a Rhein Engine chart file (.rch);
            </summary>
        </member>
        <member name="F:Rhein.Charting.ChartParser.VersionPrefix">
            <summary>
            The prefix right before the version number in a Rhein Engine chart file (.rch);
            </summary>
        </member>
        <member name="F:Rhein.Charting.ChartParser.Version">
            <summary>
            The current version of the Rhein Engine chart format.
            </summary>
        </member>
        <member name="M:Rhein.Charting.ChartParser.ToString``1(Rhein.Gameplay.Chart{``0})">
            <summary>
            Converts the <see cref="!:Chart"/> to a <see cref="T:System.String"/> that can be saved to a file.
            </summary>
            <typeparam name="T">The type of <see cref="!:Chart"/> to parse.</typeparam>
            <param name="chart">The <see cref="!:Chart"/> to parse.</param>
            <returns>A <see cref="!:Chart"/> in string form.</returns>
        </member>
        <member name="M:Rhein.Charting.ChartParser.ToChart``1(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to a <see cref="!:Chart"/> that can be used at run-time.
            </summary>
            <typeparam name="T">The type of <see cref="!:Chart"/> to convert to.</typeparam>
            <param name="str">The <see cref="T:System.String"/> to parse.</param>
            <returns>A <see cref="!:Chart"/> in run-time form.</returns>
        </member>
        <member name="T:Rhein.Collections.Base.Collection`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.ICollection`1"/> interface.
            </summary>
            <typeparam name="T">The type of the value the <see cref="T:Rhein.Collections.Base.Collection`1"/> will hold.</typeparam>
        </member>
        <member name="P:Rhein.Collections.Base.Collection`1.Count">
            <summary>
            The amount of items in the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
        </member>
        <member name="P:Rhein.Collections.Base.Collection`1.IsReadOnly">
            <summary>
            Gets if the <see cref="T:Rhein.Collections.Base.Collection`1"/> is read-only. This should always be <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Rhein.Collections.Base.Collection`1.Item(System.Int32)">
            <summary>
            Gets a value at the specified index.
            </summary>
            <param name="index">The index to look at.</param>
            <returns>The value at the specified index if index is within range, otherwise an error will be thrown.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Add(`0,System.Int32)">
            <summary>
            Adds an item to the <see cref="T:Rhein.Collections.Base.Collection`1"/> with the specified amount.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="amount">The amount of times the item will be added.</param>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a <see cref="T:Rhein.Collections.Base.Collection`1"/> of items to the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the values of the <see cref="T:Rhein.Collections.Base.Collection`1"/> to the <see cref="T:System.Array"/>.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to copy to.</param>
            <param name="index">The index to start copying at.</param>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.GetEnumerator">
            <summary>
            Gets the non-generic <see cref="T:System.Collections.IEnumerator"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.IEnumerator"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Clear">
            <summary>
            Clears the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Contains(`0)">
            <summary>
            Gets if the <see cref="T:Rhein.Collections.Base.Collection`1"/> contains the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>If the <see cref="T:Rhein.Collections.Base.Collection`1"/> contains the specified item, <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>The index if found, -1 if not found.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Remove(`0)">
            <summary>
            Removes the specified item from the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>If the item was removed, <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.Remove(System.Int32)">
            <summary>
            Removes the item at the specified index from the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>If the item was removed, <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the generic <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.#ctor">
            <summary>
            Creates a new <see cref="T:Rhein.Collections.Base.Collection`1"/> instance.
            </summary>
        </member>
        <member name="M:Rhein.Collections.Base.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <see cref="T:Rhein.Collections.Base.Collection`1"/> instance.
            </summary>
        </member>
        <member name="T:Rhein.Collections.Base.ConcurrentCollection`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> interface using FILO-style accessors.
            </summary>
            <typeparam name="T">The type of the value the <see cref="T:Rhein.Collections.Base.ConcurrentCollection`1"/> will hold.</typeparam>
        </member>
        <member name="M:Rhein.Collections.Base.ConcurrentCollection`1.TryHasNext">
            <summary>
            Attempts to check to see if the next item from the <see cref="T:Rhein.Collections.Base.ConcurrentCollection`1"/> is <see langword="null"/>.
            </summary>
            <returns><see langword="true"/> if the value is not <see langword="null"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ConcurrentCollection`1.TryNotNull">
            <summary>
            Attempts to check to see if the next item from the <see cref="T:Rhein.Collections.Base.ConcurrentCollection`1"/> is <see langword="null"/>.
            </summary>
            <returns><see langword="true"/> if the value is not <see langword="null"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ConcurrentCollection`1.TryRemove">
            <summary>
            Attempts to remove the next item from the <see cref="T:Rhein.Collections.Base.ConcurrentCollection`1"/>.
            </summary>
            <returns><see langword="true"/> if the remove was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ConcurrentCollection`1.#ctor">
            <summary>
            Creates a new <see cref="T:Rhein.Collections.Base.Collection`1"/> instance.
            </summary>
        </member>
        <member name="M:Rhein.Collections.Base.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <see cref="T:Rhein.Collections.Base.Collection`1"/> instance.
            </summary>
        </member>
        <member name="T:Rhein.Collections.Base.Enumerator`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface.
            </summary>
            <typeparam name="T">The type of the value the <see cref="T:Rhein.Collections.Base.Enumerator`1"/> will hold.</typeparam>
        </member>
        <member name="P:Rhein.Collections.Base.Enumerator`1.Current">
            <summary>
            The current object.
            </summary>
        </member>
        <member name="M:Rhein.Collections.Base.Enumerator`1.MoveNext">
            <summary>
            Moves to the next object of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Collections.Base.Enumerator`1"/> moved successfully, <see langword="false"/> if it reached the end.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.Enumerator`1.Reset">
            <summary>
            Resets the <see cref="T:Rhein.Collections.Base.Enumerator`1"/> back to the beginning.
            </summary>
        </member>
        <member name="M:Rhein.Collections.Base.Enumerator`1.Dispose">
            <summary>
            Cleans up any resources from the <see cref="T:Rhein.Collections.Base.Enumerator`1"/> to prepare for garbage collection.
            </summary>
        </member>
        <member name="T:Rhein.Collections.Base.ReadOnlyCollection`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> interface.
            </summary>
            <typeparam name="T">The type of the value the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/> will hold.</typeparam>
        </member>
        <member name="P:Rhein.Collections.Base.ReadOnlyCollection`1.Count">
            <summary>
            The amount of items in the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/>.
            </summary>
        </member>
        <member name="P:Rhein.Collections.Base.ReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets if the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/> is read-only. This should always be <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Rhein.Collections.Base.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Gets a value at the specified index.
            </summary>
            <param name="index">The index to look at.</param>
            <returns>The value at the specified index if index is within range, otherwise an error will be thrown.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the values of the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/> to the <see cref="T:System.Array"/>.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to copy to.</param>
            <param name="index">The index to start copying at.</param>
        </member>
        <member name="M:Rhein.Collections.Base.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Gets the non-generic <see cref="T:System.Collections.IEnumerator"/> of the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.IEnumerator"/> of the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Gets if the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/> contains the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>If the <see cref="T:Rhein.Collections.Base.ReadOnlyCollection`1"/> contains the specified item, <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>The index if found, -1 if not found.</returns>
        </member>
        <member name="M:Rhein.Collections.Base.ReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the generic <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the <see cref="T:Rhein.Collections.Base.Collection`1"/>.</returns>
        </member>
        <member name="T:Rhein.Collections.GenericEventCollection">
            <summary>
            A <see cref="T:Rhein.Collections.Base.Collection`1"/> of <see cref="T:Rhein.Gameplay.Event"/>s.
            </summary>
        </member>
        <member name="T:Rhein.Collections.GenericNoteCollection">
            <summary>
            A <see cref="T:Rhein.Collections.Base.ConcurrentCollection`1"/> of <see cref="T:Rhein.Gameplay.Note"/>s.
            </summary>
        </member>
        <member name="T:Rhein.Game">
            <summary>
            The current Rhein Engine <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Gamemode">
            <summary>
            Gets the current <see cref="T:Rhein.Gamemodes.BaseGamemode"/> of the <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Running">
            <summary>
            Gets if the <see cref="T:Rhein.Game"/> is currently running.
            </summary>
        </member>
        <member name="M:Rhein.Game.Run">
            <summary>
            Starts a new <see cref="T:Rhein.Gamemodes.Mania4k"/> <see cref="T:Rhein.Game"/> with <see cref="F:Rhein.TimingWindows.Default"/> and no <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
            
            <returns>The <see cref="T:Rhein.Result"/> status of <see cref="M:Rhein.Game.Run"/>.</returns>
        </member>
        <member name="M:Rhein.Game.Run(Rhein.TimingWindows,Rhein.Mods.Mod[])">
            <summary>
            Starts a new <see cref="T:Rhein.Gamemodes.Mania4k"/> <see cref="T:Rhein.Game"/> with the provided <see cref="T:Rhein.TimingWindows"/> and <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
            
            <returns>The <see cref="T:Rhein.Result"/> status of <see cref="M:Rhein.Game.Run(Rhein.TimingWindows,Rhein.Mods.Mod[])"/>.</returns>
        </member>
        <member name="M:Rhein.Game.Run``1(Rhein.TimingWindows,Rhein.Mods.Mod[])">
            <summary>
            Starts a new specified <see cref="T:Rhein.Game"/> with the provided <see cref="T:Rhein.TimingWindows"/> and <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
            
            <returns>The <see cref="T:Rhein.Result"/> status of <see cref="M:Rhein.Game.Run``1(Rhein.TimingWindows,Rhein.Mods.Mod[])"/>.</returns>
        </member>
        <member name="M:Rhein.Game.Stop">
            <summary>
            Stops the current <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="M:Rhein.Game.Sync(System.Single)">
            <summary>
            Syncs the Rhein Engine music position with an external one.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Rhein.Game.GetChart``1">
            <summary>
            The current <see cref="T:Rhein.Gameplay.Chart`1"/> being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.TimingWindows">
            <summary>
            The current <see cref="T:Rhein.TimingWindows"/> being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Mods">
            <summary>
            The current <see cref="T:Rhein.Mods.Mod"/>s being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Name">
            <summary>
            The current Name of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Bpm">
            <summary>
            The current Beats Per Minute of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Health">
            <summary>
            The current Health of the player in this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Speed">
            <summary>
            The current Speed of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Position">
            <summary>
            The current Position of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Length">
            <summary>
            The current Length of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="P:Rhein.Game.Beat">
            <summary>
            The current Beat of the song being used for this <see cref="T:Rhein.Game"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.BaseGamemode.GetChart``1">
            <summary>
            Gets the current <see cref="T:Rhein.Gameplay.Chart`1"/>.
            </summary>
            <typeparam name="N">The <see cref="T:Rhein.Gameplay.Note"/> type.</typeparam>
            <returns>The current <see cref="T:Rhein.Gameplay.Chart`1"/> being used.</returns>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Windows">
            <summary>
            The current <see cref="T:Rhein.TimingWindows"/> being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Mods">
            <summary>
            The current <see cref="T:Rhein.Mods.Mod"/>s being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Name">
            <summary>
            The current Name of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Bpm">
            <summary>
            The current Beats Per Minute of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Speed">
            <summary>
            The current Speed of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Position">
            <summary>
            The current Position of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Beat">
            <summary>
            The current Beat of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Length">
            <summary>
            The Length of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.BaseGamemode.Health">
            <summary>
            The current Health of the player in this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.BaseGamemode.Process">
            <summary>
            Updates the <see cref="T:Rhein.Gamemodes.BaseGamemode"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.BaseGamemode.As``1">
            <summary>
            Converts the current <see cref="T:Rhein.Gamemodes.Gamemode`1"/> to child/base type. This won't convert to other types.
            </summary>
            <typeparam name="G">The type to convert to.</typeparam>
            <returns>The converted <see cref="T:Rhein.Gamemodes.Gamemode`1"/>.</returns>
        </member>
        <member name="T:Rhein.Gamemodes.Gamemode`1">
            <summary>
            An abstract <see cref="T:Rhein.Gamemodes.Gamemode`1"/> to implement your own gameplay styles.
            This class contains everything related to current gameplay.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.As``1">
            <summary>
            Converts the current <see cref="T:Rhein.Gamemodes.Gamemode`1"/> to child/base type. This won't convert to other types.
            </summary>
            <typeparam name="G">The type to convert to.</typeparam>
            <returns>The converted <see cref="T:Rhein.Gamemodes.Gamemode`1"/>.</returns>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Chart">
            <summary>
            The current <see cref="T:Rhein.Gameplay.Chart`1"/> being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.GetChart``1">
            <summary>
            Gets the current <see cref="T:Rhein.Gameplay.Chart`1"/>
            </summary>
            <typeparam name="T">The <see cref="T:Rhein.Gameplay.Note"/> type.</typeparam>
            <returns>The current <see cref="T:Rhein.Gameplay.Chart`1"/> being used.</returns>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Windows">
            <summary>
            The current <see cref="T:Rhein.TimingWindows"/> being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Mods">
            <summary>
            The current <see cref="T:Rhein.Mods.Mod"/>s being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Name">
            <summary>
            The current Name of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Bpm">
            <summary>
            The current Beats Per Minute of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Speed">
            <summary>
            The current Speed of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Position">
            <summary>
            The current Position of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Beat">
            <summary>
            The current Beat of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Length">
            <summary>
            The Length of the song being used for this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Health">
            <summary>
            The current Health of the player in this <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Gamemode`1.Playing">
            <summary>
            Gets if the <see cref="!:Gamemode"/> is currently running.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.Process">
            <summary>
            Updates the <see cref="T:Rhein.Gamemodes.Gamemode`1"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.#ctor">
            <summary>
            Creates a new <see cref="!:Gamemode"/> instance.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.#ctor(Rhein.TimingWindows)">
            <summary>
            Creates a new <see cref="!:Gamemode"/> instance with custom <see cref="T:Rhein.TimingWindows"/>.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.#ctor(Rhein.Mods.Mod[])">
            <summary>
            Creates a new <see cref="!:Gamemode"/> instance with custom <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
        </member>
        <member name="M:Rhein.Gamemodes.Gamemode`1.#ctor(Rhein.TimingWindows,Rhein.Mods.Mod[])">
            <summary>
            Creates a new <see cref="!:Gamemode"/> instance with custom <see cref="T:Rhein.TimingWindows"/> and <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
        </member>
        <member name="T:Rhein.Gamemodes.Mania">
            <summary>
            An abstract <see cref="T:Rhein.Gamemodes.Mania"/> <see cref="!:Gamemode"/> class to be implemented by your own <see cref="T:Rhein.Gamemodes.Mania"/> gamemodes.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Mania.Keys">
            <summary>
            The amount of keys used in the current <see cref="T:Rhein.Gamemodes.Mania"/> <see cref="!:Gamemode"/>.
            </summary>
        </member>
        <member name="T:Rhein.Gamemodes.Mania4k">
            <summary>
            The 4 Key version of the <see cref="T:Rhein.Gamemodes.Mania"/> gamemode.
            </summary>
        </member>
        <member name="P:Rhein.Gamemodes.Mania4k.Keys">
            <summary>
            The amount of keys used in the current <see cref="T:Rhein.Gamemodes.Mania4k"/> <see cref="!:Gamemode"/>. This number should always be 4.
            </summary>
        </member>
        <member name="T:Rhein.Gameplay.Chart`1">
            <summary>
            The base class for all <see cref="!:Chart"/>s.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.Type">
            <summary>
            The type ID of the <see cref="!:Chart"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.Bpm">
            <summary>
            The Beats Per Minute of the <see cref="!:Chart"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.Offset">
            <summary>
            The Offset in milliseconds of the <see cref="!:Chart"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.TypeRange">
            <summary>
            Gets the range of note types in the current collection. Can be used as the Key amount in <see cref="T:Rhein.Gamemodes.Mania"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.Notes">
            <summary>
            A collection of base <see cref="T:Rhein.Gameplay.Note"/>s used in the <see cref="!:Chart"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Chart`1.Events">
            <summary>
            A collection of base <see cref="T:Rhein.Gameplay.Event"/>s used in the <see cref="!:Chart"/>.
            </summary>
        </member>
        <member name="T:Rhein.Gameplay.Event">
            <summary>
            The base class for all <see cref="T:Rhein.Gameplay.Event"/>s.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Event.Type">
            <summary>
            The type ID of the <see cref="T:Rhein.Gameplay.Event"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Event.Beat">
            <summary>
            The beat that the <see cref="T:Rhein.Gameplay.Event"/> should be run on.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Event.Value">
            <summary>
            The value of the <see cref="T:Rhein.Gameplay.Event"/> for variation.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Event.Executed">
            <summary>
            Gets if the <see cref="T:Rhein.Gameplay.Event"/> has ran yet.
            </summary>
        </member>
        <member name="T:Rhein.Gameplay.IChart">
            <summary>
            The base class for all <see cref="!:Chart"/>s.
            </summary>
        </member>
        <member name="T:Rhein.Gameplay.Note">
            <summary>
            A base <see cref="T:Rhein.Gameplay.Note"/> class that provides basic timing data.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Type">
            <summary>
            The type ID of the <see cref="T:Rhein.Gameplay.Note"/>.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Beat">
            <summary>
            The beat that the <see cref="T:Rhein.Gameplay.Note"/> should be hit on.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Length">
            <summary>
            The length in beats that the <see cref="T:Rhein.Gameplay.Note"/> should be held for.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Hit">
            <summary>
            Gets if the <see cref="T:Rhein.Gameplay.Note"/> has been hit yet.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Destroyed">
            <summary>
            Gets if the <see cref="T:Rhein.Gameplay.Note"/> has been hit/missed yet.
            </summary>
        </member>
        <member name="P:Rhein.Gameplay.Note.Deviance">
            <summary>
            Gets the time in seconds off the note was hit by.
            </summary>
        </member>
        <member name="M:Rhein.Gameplay.Note.Destroy">
            <summary>
            Sets <see cref="P:Rhein.Gameplay.Note.Destroyed"/> to true.
            </summary>
        </member>
        <member name="M:Rhein.Gameplay.Note.#ctor">
            <summary>
            Creates a new <see cref="T:Rhein.Gameplay.Note"/> instance.
            </summary>
        </member>
        <member name="T:Rhein.Key">
            <summary>
            The <see cref="T:Rhein.Key"/> code of a <see cref="T:Rhein.Key"/>.
            </summary>
        </member>
        <member name="F:Rhein.Key.None">
            <summary>None.</summary>
        </member>
        <member name="F:Rhein.Key.Space">
            <summary>Space.</summary>
        </member>
        <member name="F:Rhein.Key.Enter">
            <summary>Enter.</summary>
        </member>
        <member name="F:Rhein.Key.Tab">
            <summary>Tab.</summary>
        </member>
        <member name="F:Rhein.Key.Backquote">
            <summary>`</summary>
        </member>
        <member name="F:Rhein.Key.Quote">
            <summary>'</summary>
        </member>
        <member name="F:Rhein.Key.Semicolon">
            <summary>;</summary>
        </member>
        <member name="F:Rhein.Key.Comma">
            <summary>,</summary>
        </member>
        <member name="F:Rhein.Key.Period">
            <summary>.</summary>
        </member>
        <member name="F:Rhein.Key.Slash">
            <summary>/</summary>
        </member>
        <member name="F:Rhein.Key.Backslash">
            <summary>\</summary>
        </member>
        <member name="F:Rhein.Key.LeftBracket">
            <summary>[</summary>
        </member>
        <member name="F:Rhein.Key.RightBracket">
            <summary>]</summary>
        </member>
        <member name="F:Rhein.Key.Minus">
            <summary>-</summary>
        </member>
        <member name="F:Rhein.Key.Equals">
            <summary>=</summary>
        </member>
        <member name="F:Rhein.Key.A">
            <summary>A</summary>
        </member>
        <member name="F:Rhein.Key.B">
            <summary>B</summary>
        </member>
        <member name="F:Rhein.Key.C">
            <summary>C</summary>
        </member>
        <member name="F:Rhein.Key.D">
            <summary>D</summary>
        </member>
        <member name="F:Rhein.Key.E">
            <summary>E</summary>
        </member>
        <member name="F:Rhein.Key.F">
            <summary>F</summary>
        </member>
        <member name="F:Rhein.Key.G">
            <summary>G</summary>
        </member>
        <member name="F:Rhein.Key.H">
            <summary>H</summary>
        </member>
        <member name="F:Rhein.Key.I">
            <summary>I</summary>
        </member>
        <member name="F:Rhein.Key.J">
            <summary>J</summary>
        </member>
        <member name="F:Rhein.Key.K">
            <summary>K</summary>
        </member>
        <member name="F:Rhein.Key.L">
            <summary>L</summary>
        </member>
        <member name="F:Rhein.Key.M">
            <summary>M</summary>
        </member>
        <member name="F:Rhein.Key.N">
            <summary>N</summary>
        </member>
        <member name="F:Rhein.Key.O">
            <summary>O</summary>
        </member>
        <member name="F:Rhein.Key.P">
            <summary>P</summary>
        </member>
        <member name="F:Rhein.Key.Q">
            <summary>Q</summary>
        </member>
        <member name="F:Rhein.Key.R">
            <summary>R</summary>
        </member>
        <member name="F:Rhein.Key.S">
            <summary>S</summary>
        </member>
        <member name="F:Rhein.Key.T">
            <summary>T</summary>
        </member>
        <member name="F:Rhein.Key.U">
            <summary>U</summary>
        </member>
        <member name="F:Rhein.Key.V">
            <summary>V</summary>
        </member>
        <member name="F:Rhein.Key.W">
            <summary>W</summary>
        </member>
        <member name="F:Rhein.Key.X">
            <summary>X</summary>
        </member>
        <member name="F:Rhein.Key.Y">
            <summary>Y</summary>
        </member>
        <member name="F:Rhein.Key.Z">
            <summary>Z</summary>
        </member>
        <member name="F:Rhein.Key.Digit1">
            <summary>1</summary>
        </member>
        <member name="F:Rhein.Key.Digit2">
            <summary>2</summary>
        </member>
        <member name="F:Rhein.Key.Digit3">
            <summary>3</summary>
        </member>
        <member name="F:Rhein.Key.Digit4">
            <summary>4</summary>
        </member>
        <member name="F:Rhein.Key.Digit5">
            <summary>5</summary>
        </member>
        <member name="F:Rhein.Key.Digit6">
            <summary>6</summary>
        </member>
        <member name="F:Rhein.Key.Digit7">
            <summary>7</summary>
        </member>
        <member name="F:Rhein.Key.Digit8">
            <summary>8</summary>
        </member>
        <member name="F:Rhein.Key.Digit9">
            <summary>9</summary>
        </member>
        <member name="F:Rhein.Key.Digit0">
            <summary>0</summary>
        </member>
        <member name="F:Rhein.Key.LeftShift">
            <summary>Left Shift.</summary>
        </member>
        <member name="F:Rhein.Key.RightShift">
            <summary>Right Shift.</summary>
        </member>
        <member name="F:Rhein.Key.LeftAlt">
            <summary>Left Alt.</summary>
        </member>
        <member name="F:Rhein.Key.RightAlt">
            <summary>Right Alt.</summary>
        </member>
        <member name="F:Rhein.Key.AltGr">
            <summary>Alt Gr.</summary>
        </member>
        <member name="F:Rhein.Key.LeftCtrl">
            <summary>Left Control.</summary>
        </member>
        <member name="F:Rhein.Key.RightCtrl">
            <summary>Right Control.</summary>
        </member>
        <member name="F:Rhein.Key.LeftMeta">
            <summary>Left Meta.</summary>
        </member>
        <member name="F:Rhein.Key.LeftWindows">
            <summary>Left Windows.</summary>
        </member>
        <member name="F:Rhein.Key.LeftApple">
            <summary>Left Apple.</summary>
        </member>
        <member name="F:Rhein.Key.LeftCommand">
            <summary>Left Command.</summary>
        </member>
        <member name="F:Rhein.Key.RightMeta">
            <summary>Right Meta.</summary>
        </member>
        <member name="F:Rhein.Key.RightWindows">
            <summary>Right Windows.</summary>
        </member>
        <member name="F:Rhein.Key.RightApple">
            <summary>Right Apple.</summary>
        </member>
        <member name="F:Rhein.Key.RightCommand">
            <summary>Right Command.</summary>
        </member>
        <member name="F:Rhein.Key.ContextMenu">
            <summary>Context Menu.</summary>
        </member>
        <member name="F:Rhein.Key.Escape">
            <summary>Escape.</summary>
        </member>
        <member name="F:Rhein.Key.LeftArrow">
            <summary>Left.</summary>
        </member>
        <member name="F:Rhein.Key.RightArrow">
            <summary>Right.</summary>
        </member>
        <member name="F:Rhein.Key.UpArrow">
            <summary>Up.</summary>
        </member>
        <member name="F:Rhein.Key.DownArrow">
            <summary>Down.</summary>
        </member>
        <member name="F:Rhein.Key.Backspace">
            <summary>Backspace.</summary>
        </member>
        <member name="F:Rhein.Key.PageDown">
            <summary>Page Down.</summary>
        </member>
        <member name="F:Rhein.Key.PageUp">
            <summary>Page Up.</summary>
        </member>
        <member name="F:Rhein.Key.Home">
            <summary>Home.</summary>
        </member>
        <member name="F:Rhein.Key.End">
            <summary>End.</summary>
        </member>
        <member name="F:Rhein.Key.Insert">
            <summary>Insert.</summary>
        </member>
        <member name="F:Rhein.Key.Delete">
            <summary>Delete.</summary>
        </member>
        <member name="F:Rhein.Key.CapsLock">
            <summary>Capslock.</summary>
        </member>
        <member name="F:Rhein.Key.NumLock">
            <summary>Num Lock.</summary>
        </member>
        <member name="F:Rhein.Key.PrintScreen">
            <summary>Print Screen.</summary>
        </member>
        <member name="F:Rhein.Key.ScrollLock">
            <summary>Scroll Lock.</summary>
        </member>
        <member name="F:Rhein.Key.Pause">
            <summary>Pause.</summary>
        </member>
        <member name="F:Rhein.Key.NumpadEnter">
            <summary>Num Enter</summary>
        </member>
        <member name="F:Rhein.Key.NumpadDivide">
            <summary>Num /</summary>
        </member>
        <member name="F:Rhein.Key.NumpadMultiply">
            <summary>Num *</summary>
        </member>
        <member name="F:Rhein.Key.NumpadPlus">
            <summary>Num +</summary>
        </member>
        <member name="F:Rhein.Key.NumpadMinus">
            <summary>Num -</summary>
        </member>
        <member name="F:Rhein.Key.NumpadPeriod">
            <summary>Num .</summary>
        </member>
        <member name="F:Rhein.Key.NumpadEquals">
            <summary>Num =</summary>
        </member>
        <member name="F:Rhein.Key.Numpad0">
            <summary>Num 0</summary>
        </member>
        <member name="F:Rhein.Key.Numpad1">
            <summary>Num 1</summary>
        </member>
        <member name="F:Rhein.Key.Numpad2">
            <summary>Num 2</summary>
        </member>
        <member name="F:Rhein.Key.Numpad3">
            <summary>Num 3</summary>
        </member>
        <member name="F:Rhein.Key.Numpad4">
            <summary>Num 4</summary>
        </member>
        <member name="F:Rhein.Key.Numpad5">
            <summary>Num 5</summary>
        </member>
        <member name="F:Rhein.Key.Numpad6">
            <summary>Num 6</summary>
        </member>
        <member name="F:Rhein.Key.Numpad7">
            <summary>Num 7</summary>
        </member>
        <member name="F:Rhein.Key.Numpad8">
            <summary>Num 8</summary>
        </member>
        <member name="F:Rhein.Key.Numpad9">
            <summary>Num 9</summary>
        </member>
        <member name="F:Rhein.Key.F1">
            <summary>F1</summary>
        </member>
        <member name="F:Rhein.Key.F2">
            <summary>F2</summary>
        </member>
        <member name="F:Rhein.Key.F3">
            <summary>F3</summary>
        </member>
        <member name="F:Rhein.Key.F4">
            <summary>F4</summary>
        </member>
        <member name="F:Rhein.Key.F5">
            <summary>F5</summary>
        </member>
        <member name="F:Rhein.Key.F6">
            <summary>F6</summary>
        </member>
        <member name="F:Rhein.Key.F7">
            <summary>F7</summary>
        </member>
        <member name="F:Rhein.Key.F8">
            <summary>F8</summary>
        </member>
        <member name="F:Rhein.Key.F9">
            <summary>F9</summary>
        </member>
        <member name="F:Rhein.Key.F10">
            <summary>F10</summary>
        </member>
        <member name="F:Rhein.Key.F11">
            <summary>F11</summary>
        </member>
        <member name="F:Rhein.Key.F12">
            <summary>F12</summary>
        </member>
        <member name="F:Rhein.Key.OEM1">
            <summary>OEM 1</summary>
        </member>
        <member name="F:Rhein.Key.OEM2">
            <summary>OEM 2</summary>
        </member>
        <member name="F:Rhein.Key.OEM3">
            <summary>OEM 3</summary>
        </member>
        <member name="F:Rhein.Key.OEM4">
            <summary>OEM 4</summary>
        </member>
        <member name="F:Rhein.Key.OEM5">
            <summary>OEM 5</summary>
        </member>
        <member name="F:Rhein.Key.IMESelected">
            <summary>IME Selected</summary>
        </member>
        <member name="T:Rhein.Button">
            <summary>
            The <see cref="T:Rhein.Button"/> code of a controller <see cref="T:Rhein.Button"/>.
            </summary>
        </member>
        <member name="F:Rhein.Button.DpadUp">
            <summary>D-Pad Up.</summary>
        </member>
        <member name="F:Rhein.Button.DpadDown">
            <summary>D-Pad Down.</summary>
        </member>
        <member name="F:Rhein.Button.DpadLeft">
            <summary>D-Pad Left.</summary>
        </member>
        <member name="F:Rhein.Button.DpadRight">
            <summary>D-Pad Right.</summary>
        </member>
        <member name="F:Rhein.Button.North">
            <summary>North Button.</summary>
        </member>
        <member name="F:Rhein.Button.Y">
            <summary>Y Button.</summary>
        </member>
        <member name="F:Rhein.Button.Triangle">
            <summary>Triangle Button.</summary>
        </member>
        <member name="F:Rhein.Button.East">
            <summary>East Button.</summary>
        </member>
        <member name="F:Rhein.Button.B">
            <summary>B Button.</summary>
        </member>
        <member name="F:Rhein.Button.Circle">
            <summary>Circle Button.</summary>
        </member>
        <member name="F:Rhein.Button.South">
            <summary>South Button.</summary>
        </member>
        <member name="F:Rhein.Button.A">
            <summary>A Button.</summary>
        </member>
        <member name="F:Rhein.Button.Cross">
            <summary>Cross Button.</summary>
        </member>
        <member name="F:Rhein.Button.West">
            <summary>West Button.</summary>
        </member>
        <member name="F:Rhein.Button.X">
            <summary>X Button.</summary>
        </member>
        <member name="F:Rhein.Button.Square">
            <summary>Square Button.</summary>
        </member>
        <member name="F:Rhein.Button.LeftStick">
            <summary>Left Stick.</summary>
        </member>
        <member name="F:Rhein.Button.RightStick">
            <summary>Right Stick.</summary>
        </member>
        <member name="F:Rhein.Button.LeftShoulder">
            <summary>Left Shoulder.</summary>
        </member>
        <member name="F:Rhein.Button.RightShoulder">
            <summary>Right Shoulder.</summary>
        </member>
        <member name="F:Rhein.Button.Start">
            <summary>Start Button.</summary>
        </member>
        <member name="F:Rhein.Button.Select">
            <summary>Select Button.</summary>
        </member>
        <member name="F:Rhein.Button.LeftTrigger">
            <summary>Left Trigger.</summary>
        </member>
        <member name="F:Rhein.Button.RightTrigger">
            <summary>Right Trigger.</summary>
        </member>
        <member name="T:Rhein.Mouse">
            <summary>
            The <see cref="T:Rhein.Mouse"/> code of a <see cref="T:Rhein.Mouse"/> button.
            </summary>
        </member>
        <member name="F:Rhein.Mouse.Left">
            <summary>Left Mouse Button (on right-handed mouse).</summary>
        </member>
        <member name="F:Rhein.Mouse.Button1">
            <summary>Primary Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Right">
            <summary>Right Mouse Button (on right-handed mouse).</summary>
        </member>
        <member name="F:Rhein.Mouse.Button2">
            <summary>Secondary Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Middle">
            <summary>Middle Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Button3">
            <summary>Middle Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Forward">
            <summary>Forward Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Button4">
            <summary>Forward Mouse Button.</summary>
        </member>
        <member name="F:Rhein.Mouse.Back">
            <summary>Back Mouse Button</summary>
        </member>
        <member name="F:Rhein.Mouse.Button5">
            <summary>Back Mouse Button.</summary>
        </member>
        <member name="T:Rhein.Input">
            <summary>
            The class that can hook into external functions to act as input.
            </summary>
        </member>
        <member name="T:Rhein.Input.KeyPressedHandle">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> press check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was pressed down this update tick. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Rhein.Input.KeyReleasedHandle">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> release check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was released this update tick. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Rhein.Input.KeyHeldHandle">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> hold check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> is being held down. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Rhein.Input.UpdateFunc">
            <summary>
            Used to run an update in an external library (usually the main engine's input) to run logic behind the scenes during a game.
            </summary>
        </member>
        <member name="P:Rhein.Input.KeyPressHandler">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> press check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was pressed down this update tick. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Rhein.Input.KeyReleaseHandler">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> release check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was released this update tick. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Rhein.Input.KeyHoldHandler">
            <summary>
            Handles a <see cref="T:Rhein.Key"/> hold check. If you're using anything other than Unity, you may want to convert the <see cref="T:Rhein.Key"/> value.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> is being held down. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:Rhein.Input.OnUpdate">
            <summary>
            Used to run an update in an external library (usually the main engine's input) to run logic behind the scenes during a game.
            </summary>
        </member>
        <member name="M:Rhein.Input.KeyDown(Rhein.Key)">
            <summary>
            Checks to see if the <see cref="T:Rhein.Key"/> was pressed this tick.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was pressed. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Input.KeyUp(Rhein.Key)">
            <summary>
            Checks to see if the <see cref="T:Rhein.Key"/> was released this tick.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> was released. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Input.KeyHold(Rhein.Key)">
            <summary>
            Checks to see if the <see cref="T:Rhein.Key"/> is being held down.
            </summary>
            <param name="key">The <see cref="T:Rhein.Key"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:Rhein.Key"/> is being held down. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Rhein.Judgement">
            <summary>
            <see cref="T:Rhein.Judgement"/>s used to tell the player how accurate they are.
            </summary>
        </member>
        <member name="F:Rhein.Judgement.Miss">
            <summary>Miss.</summary>
        </member>
        <member name="F:Rhein.Judgement.Okay">
            <summary>Okay.</summary>
        </member>
        <member name="F:Rhein.Judgement.Good">
            <summary>Good.</summary>
        </member>
        <member name="F:Rhein.Judgement.Great">
            <summary>Great.</summary>
        </member>
        <member name="F:Rhein.Judgement.Perfect">
            <summary>Perfect.</summary>
        </member>
        <member name="F:Rhein.Judgement.Marvelous">
            <summary>Marvelous.</summary>
        </member>
        <member name="T:Rhein.Logger">
            <summary>
            The class that can hook into external functions to act as logging.
            </summary>
        </member>
        <member name="T:Rhein.Logger.LogHandle">
            <summary>
            Handles logging.
            </summary>
            <param name="msg">The message to write.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="E:Rhein.Logger.OnLog">
            <summary>
            Used to handle logging with external libraries (usually the main engine).
            </summary>
        </member>
        <member name="M:Rhein.Logger.Write(System.String)">
            <summary>
            Writes a message to the log.
            </summary>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:Rhein.Logger.WriteWarn(System.String)">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:Rhein.Logger.WriteError(System.String)">
            <summary>
            Writes an error message to the log.
            </summary>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:Rhein.Logger.WriteMsg(System.String)">
            <summary>
            Writes a message to the log without a prefix.
            </summary>
            <param name="msg">The message to write.</param>
        </member>
        <member name="T:Rhein.AngleMode">
            <summary>
            The type of angle you're measuring in. Usually used for trigonometry.
            </summary>
        </member>
        <member name="T:Rhein.Math">
            <summary>
            A collection of <see cref="T:Rhein.Math"/> functions and variables.
            </summary>
        </member>
        <member name="F:Rhein.Math.Infinity">
            <summary>
            Not a real number, but we'll use it as one anyway!
            </summary>
        </member>
        <member name="F:Rhein.Math.NegativeInfinity">
            <summary>
            The negative version of <see cref="F:Rhein.Math.Infinity"/>.
            </summary>
        </member>
        <member name="F:Rhein.Math.Pi">
            <summary>
            The classic infinite decimal number used for trigonometry.
            </summary>
        </member>
        <member name="F:Rhein.Math.Tau">
            <summary>
            It's <see cref="F:Rhein.Math.Pi"/> multiplied by 2.
            </summary>
        </member>
        <member name="F:Rhein.Math.Epsilon">
            <summary>
            The smallest number you're gonna get in C#. This is usually used to check for precision errors in <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="F:Rhein.Math.Deg2Rad">
            <summary>
            Used to convert degrees into radians through multiplication.
            </summary>
        </member>
        <member name="F:Rhein.Math.Rad2Deg">
            <summary>
            Used to convert radians into degrees through multiplication.
            </summary>
        </member>
        <member name="M:Rhein.Math.Approx(System.Single,System.Single)">
            <summary>
            Determines if both numbers are about the same (using <see cref="F:Rhein.Math.Epsilon"/>).
            </summary>
            <param name="x">The first number to check.</param>
            <param name="y">The second number to check.</param>
            <returns><see langword="true"/> if both numbers are similar, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Math.ApproxZero(System.Single)">
            <summary>
            Determines if a number is about zero (using <see cref="F:Rhein.Math.Epsilon"/>).
            </summary>
            <param name="x">The number to check.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is about equal to zero, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Add(System.Single,System.Single)">
            <summary>
            Adds two numbers together.
            </summary>
            <param name="x">The first number to add.</param>
            <param name="y">The second number to add.</param>
            <returns>The sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Subtract(System.Single,System.Single)">
            <summary>
            Subtracts a number from another.
            </summary>
            <param name="x">The number to subtract from.</param>
            <param name="y">The number to subtract by.</param>
            <returns>The difference between <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Multiply(System.Single,System.Single)">
            <summary>
            Multiplies two numbers together.
            </summary>
            <param name="x">The first number to multiply.</param>
            <param name="y">The second number to multiply.</param>
            <returns>The product of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Divide(System.Single,System.Single)">
            <summary>
            Divides a number by another.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The quotient of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Mod(System.Single,System.Single)">
            <summary>
            Divides a number by another and gets the remainder.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The remainder of <paramref name="x"/> divided by <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.PosMod(System.Single,System.Single)">
            <summary>
            Divides a number by another and gets the absolute value of the remainder.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The absolute value of the remainder of <paramref name="x"/> divided by <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Square(System.Single)">
            <summary>
            Multiplies the number by itself.
            </summary>
            <param name="x">The number to square.</param>
            <returns>The product of <paramref name="x"/> multiplied by <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Cube(System.Single)">
            <summary>
            Multiplies the number by itself two times.
            </summary>
            <param name="x">The number to cube.</param>
            <returns>The product of <paramref name="x"/> multiplied by <paramref name="x"/> multiplied by <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Sqrt(System.Single)">
            <summary>
            Gets the square root of a number.
            </summary>
            <param name="x">The square.</param>
            <returns>The square root of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Cbrt(System.Single)">
            <summary>
            Gets the cube root of a number.
            </summary>
            <param name="x">The cube.</param>
            <returns>The cube root of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Pow(System.Single,System.Single)">
            <summary>
            Gets the result of a number to the power of another.
            </summary>
            <param name="x">The base.</param>
            <param name="p">The power.</param>
            <returns>The result of <paramref name="x"/> to the power of <paramref name="p"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Root(System.Single,System.Single)">
            <summary>
            Gets the root of a number to the power of another.
            </summary>
            <param name="x">The base.</param>
            <param name="p">The root.</param>
            <returns>The result of <paramref name="x"/> to the power of -<paramref name="p"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Log(System.Single,System.Single)">
            <summary>
            Gets the exponent of a exponential.
            </summary>
            <param name="a">The exponential.</param>
            <param name="b">The base.</param>
            <returns>The Log base <paramref name="b"/> of <paramref name="a"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Log10(System.Single)">
            <summary>
            Gets the exponent of a exponential with a base of 10.
            </summary>
            <param name="a">The exponential.</param>
            <returns>The Log base 10 of <paramref name="a"/>.</returns>
        </member>
        <member name="M:Rhein.Math.LogE(System.Single)">
            <summary>
            Gets the exponent of a exponential with a base of E.
            </summary>
            <param name="a">The exponential.</param>
            <returns>The Log base E of <paramref name="a"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Length(System.Single,System.Single)">
            <summary>
            Gets the length of two numbers using the Pythagorean theorem.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>C, or the length of the hypotenuse.</returns>
        </member>
        <member name="M:Rhein.Math.SqrLength(System.Single,System.Single)">
            <summary>
            Gets the square length of two numbers using the Pythagorean theorem.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>C squared, or the square length of the hypotenuse.</returns>
        </member>
        <member name="M:Rhein.Math.Length(System.Single,System.Single,System.Single)">
            <summary>
            Gets the length of three numbers using a modified Pythagorean theorem.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <param name="c">C.</param>
            <returns>D, or the length of the hypotenuse.</returns>
        </member>
        <member name="M:Rhein.Math.SqrLength(System.Single,System.Single,System.Single)">
            <summary>
            Gets the square length of three numbers using a modified Pythagorean theorem.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <param name="c">C.</param>
            <returns>D squared, or the square length of the hypotenuse.</returns>
        </member>
        <member name="M:Rhein.Math.Min(System.Single,System.Single)">
            <summary>
            Gets the minimum value of the collection of numbers.
            </summary>
            <param name="x">Value 1.</param>
            <param name="y">Value 2.</param>
            <returns>The smallest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Min(System.Single[])">
            <summary>
            Gets the minimum value of the collection of numbers.
            </summary>
            <param name="nums">The collection.</param>
            <returns>The smallest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Max(System.Single,System.Single)">
            <summary>
            Gets the maximum value of the collection of numbers.
            </summary>
            <param name="x">Value 1.</param>
            <param name="y">Value 2.</param>
            <returns>The biggest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Max(System.Single[])">
            <summary>
            Gets the maximum value of the collection of numbers.
            </summary>
            <param name="nums">The collection.</param>
            <returns>The biggest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Single)">
            <summary>
            Restricts a value between 0 and 1.
            </summary>
            <param name="x">The number to restrict.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Single,System.Single)">
            <summary>
            Restricts a value between 0 and the provided value.
            </summary>
            <param name="x">The number to restrict.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to restrict.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Single)">
            <summary>
            Loops a value between 0 and 1.
            </summary>
            <param name="x">The number to loop.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Single,System.Single)">
            <summary>
            Loops a value between 0 and the provided value.
            </summary>
            <param name="x">The number to loop.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Single,System.Single,System.Single)">
            <summary>
            Loops a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to loop.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Single)">
            <summary>
            Ping-pongs a value between 0 and 1.
            </summary>
            <param name="x">The number to ping-pong.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Single,System.Single)">
            <summary>
            Ping-Pongs a value between 0 and the provided value.
            </summary>
            <param name="x">The number to ping-pong.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Single,System.Single,System.Single)">
            <summary>
            Ping-Pongs a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to ping-pong.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Rhein.Math.Snap(System.Single,System.Single)">
            <summary>
            Snaps a value to the step centered at 0.
            </summary>
            <param name="x">The value to snap.</param>
            <param name="step">The step to snap at.</param>
            <returns>The snapped value.</returns>
        </member>
        <member name="M:Rhein.Math.Abs(System.Single)">
            <summary>
            Gets the absolute value of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The absolute value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Ceil(System.Single)">
            <summary>
            Gets the ceiling value (rounded up) of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The ceiling of a <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Floor(System.Single)">
            <summary>
            Gets the floor value (rounded down) of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The floor of a <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Round(System.Single)">
            <summary>
            Gets the rounded value of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The rounded of a <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Truncate(System.Single)">
            <summary>
            Gets the truncated value (rounded towards 0) of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The truncated value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Sign(System.Single)">
            <summary>
            Gets the sign of a number.
            </summary>
            <param name="x">The number to check.</param>
            <returns>+1 if positive, 0 if zero, -1 if negative.</returns>
        </member>
        <member name="M:Rhein.Math.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates a number and another number by a normalized value.
            </summary>
            <param name="x">The number to interpolate.</param>
            <param name="y">The number to interpolate towards.</param>
            <param name="t">The normalized value.</param>
            <returns>The interpolation between <paramref name="x"/> and <paramref name="y"/> by <paramref name="t"/>.</returns>
        </member>
        <member name="M:Rhein.Math.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates an angle in degrees and another angle in degrees by a normalized value.
            </summary>
            <param name="x">The angle to interpolate.</param>
            <param name="y">The angle to interpolate towards.</param>
            <param name="t">The normalized value.</param>
            <returns>The interpolation between <paramref name="x"/> and <paramref name="y"/> by <paramref name="t"/>.</returns>
        </member>
        <member name="M:Rhein.Math.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates a number and another number by an unclamped normalized value.
            </summary>
            <param name="x">The number to interpolate.</param>
            <param name="y">The number to interpolate towards.</param>
            <param name="t">The unclamped normalized value.</param>
            <returns>The interpolation between <paramref name="x"/> and <paramref name="y"/> by <paramref name="t"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Degrees(System.Single)">
            <summary>
            Converts a radian angle to degrees.
            </summary>
            <param name="r">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Rhein.Math.Radians(System.Single)">
            <summary>
            Converts a degree angle to radians.
            </summary>
            <param name="d">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Rhein.Math.Sin(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the sine of an angle.
            </summary>
            <param name="x">The angle.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The sine of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Cos(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the cosine of an angle.
            </summary>
            <param name="x">The angle.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The cosine of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Tan(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the tangent of an angle.
            </summary>
            <param name="x">The angle.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The tangent of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Asin(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the angle of a sine.
            </summary>
            <param name="x">The sine.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The angle of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Acos(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the angle of a cosine.
            </summary>
            <param name="x">The cosine.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The angle of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Atan(System.Single,Rhein.AngleMode)">
            <summary>
            Gets the angle of a tangent.
            </summary>
            <param name="x">The tangent.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The angle of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Atan2(System.Single,System.Single,Rhein.AngleMode)">
            <summary>
            Gets the angle of a tangent using two values instead of one.
            </summary>
            <param name="y">The numerator.</param>
            <param name="x">The denominator.</param>
            <param name="mode">The type of angle to use.</param>
            <returns>The angle of the tangent <paramref name="y"/>/<paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Add(System.Int32,System.Int32)">
            <summary>
            Adds two numbers together.
            </summary>
            <param name="x">The first number to add.</param>
            <param name="y">The second number to add.</param>
            <returns>The sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Subtract(System.Int32,System.Int32)">
            <summary>
            Subtracts a number from another.
            </summary>
            <param name="x">The number to subtract from.</param>
            <param name="y">The number to subtract by.</param>
            <returns>The difference between <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies two numbers together.
            </summary>
            <param name="x">The first number to multiply.</param>
            <param name="y">The second number to multiply.</param>
            <returns>The product of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Divide(System.Int32,System.Int32)">
            <summary>
            Divides a number by another.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The quotient of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Mod(System.Int32,System.Int32)">
            <summary>
            Divides a number by another and gets the remainder.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The remainder of <paramref name="x"/> divided by <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.PosMod(System.Int32,System.Int32)">
            <summary>
            Divides a number by another and gets the absolute value of the remainder.
            </summary>
            <param name="x">The number to divide.</param>
            <param name="y">The number to divide by.</param>
            <returns>The absolute value of the remainder of <paramref name="x"/> divided by <paramref name="y"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Square(System.Int32)">
            <summary>
            Multiplies the number by itself.
            </summary>
            <param name="x">The number to square.</param>
            <returns>The product of <paramref name="x"/> multiplied by <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Cube(System.Int32)">
            <summary>
            Multiplies the number by itself two times.
            </summary>
            <param name="x">The number to cube.</param>
            <returns>The product of <paramref name="x"/> multiplied by <paramref name="x"/> multiplied by <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Min(System.Int32,System.Int32)">
            <summary>
            Gets the minimum value of the collection of numbers.
            </summary>
            <param name="x">Value 1.</param>
            <param name="y">Value 2.</param>
            <returns>The smallest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Min(System.Int32[])">
            <summary>
            Gets the minimum value of the collection of numbers.
            </summary>
            <param name="nums">The collection.</param>
            <returns>The smallest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Max(System.Int32,System.Int32)">
            <summary>
            Gets the maximum value of the collection of numbers.
            </summary>
            <param name="x">Value 1.</param>
            <param name="y">Value 2.</param>
            <returns>The biggest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Max(System.Int32[])">
            <summary>
            Gets the maximum value of the collection of numbers.
            </summary>
            <param name="nums">The collection.</param>
            <returns>The biggest value of the collection.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Int32)">
            <summary>
            Restricts a value between 0 and 1.
            </summary>
            <param name="x">The number to restrict.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Int32,System.Int32)">
            <summary>
            Restricts a value between 0 and the provided value.
            </summary>
            <param name="x">The number to restrict.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to restrict.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The restricted value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Int32)">
            <summary>
            Loops a value between 0 and 1.
            </summary>
            <param name="x">The number to loop.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Int32,System.Int32)">
            <summary>
            Loops a value between 0 and the provided value.
            </summary>
            <param name="x">The number to loop.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.Loop(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loops a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to loop.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Int32)">
            <summary>
            Ping-pongs a value between 0 and 1.
            </summary>
            <param name="x">The number to ping-pong.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Int32,System.Int32)">
            <summary>
            Loops a value between 0 and the provided value.
            </summary>
            <param name="x">The number to loop.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The looped value.</returns>
        </member>
        <member name="M:Rhein.Math.PingPong(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ping-Pongs a value between the minimum and maximum boundaries.
            </summary>
            <param name="x">The number to ping-pong.</param>
            <param name="min">The minimum boundary.</param>
            <param name="max">The maximum boundary.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Rhein.Math.Abs(System.Int32)">
            <summary>
            Gets the absolute value of a number.
            </summary>
            <param name="x">The number.</param>
            <returns>The absolute value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Rhein.Math.Sign(System.Int32)">
            <summary>
            Gets the sign of a number.
            </summary>
            <param name="x">The number to check.</param>
            <returns>+1 if positive, 0 if zero, -1 if negative.</returns>
        </member>
        <member name="T:Rhein.Mods.ChillTimingMod">
            <summary>A chill <see cref="T:Rhein.TimingWindows"/> <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.ChillTimingMod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.LenientTimingMod">
            <summary>A lenient <see cref="T:Rhein.TimingWindows"/> <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.LenientTimingMod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.Mod">
            <summary>The base class for all <see cref="T:Rhein.Mods.Mod"/>s.</summary>
        </member>
        <member name="P:Rhein.Mods.Mod.Type">
            <summary>
            The <see cref="T:Rhein.Mods.Mod"/> ID. Used for online leaderboards.
            </summary>
        </member>
        <member name="P:Rhein.Mods.Mod.Cheat">
            <summary>
            Gets if the <see cref="T:Rhein.Mods.Mod"/> is a cheat <see cref="T:Rhein.Mods.Mod"/>. By default this is <see langword="true"/> to prevent cheating with unranked <see cref="T:Rhein.Mods.Mod"/>s.
            </summary>
        </member>
        <member name="M:Rhein.Mods.Mod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.NoFailMod">
            <summary>A no-fail <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.NoFailMod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.StrictTimingMod">
            <summary>A strict <see cref="T:Rhein.TimingWindows"/> <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.StrictTimingMod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.TightTimingMod">
            <summary>A tight <see cref="T:Rhein.TimingWindows"/> <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.TightTimingMod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.X000Mod">
            <summary>A base speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="P:Rhein.Mods.X000Mod.Speed">
            <summary>The speed multiplier to apply to the song.</summary>
        </member>
        <member name="M:Rhein.Mods.X000Mod.Apply(Rhein.Gamemodes.BaseGamemode)">
            <summary>
            Applies the <see cref="T:Rhein.Mods.Mod"/> to the <see cref="!:Gamemode"/>.
            </summary>
            <param name="gamemode">The <see cref="!:Gamemode"/> to apply the <see cref="T:Rhein.Mods.Mod"/> to.</param>
        </member>
        <member name="T:Rhein.Mods.X050Mod">
            <summary>A 0.50x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X055Mod">
            <summary>A 0.55x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X060Mod">
            <summary>A 0.60x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X065Mod">
            <summary>A 0.65x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X070Mod">
            <summary>A 0.70x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X075Mod">
            <summary>A 0.75x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X080Mod">
            <summary>A 0.80x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X085Mod">
            <summary>A 0.85x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X090Mod">
            <summary>A 0.90x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X095Mod">
            <summary>A 0.95x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X110Mod">
            <summary>A 1.1x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X120Mod">
            <summary>A 1.2x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X130Mod">
            <summary>A 1.3x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X140Mod">
            <summary>A 1.4x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X150Mod">
            <summary>A 1.5x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X160Mod">
            <summary>A 1.6x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X170Mod">
            <summary>A 1.7x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X180Mod">
            <summary>A 1.8x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X190Mod">
            <summary>A 1.9x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X200Mod">
            <summary>A 2.0x speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="T:Rhein.Mods.X999Mod">
            <summary>A custom speed <see cref="T:Rhein.Mods.Mod"/>.</summary>
        </member>
        <member name="M:Rhein.Mods.X999Mod.#ctor(System.Single)">
            <summary>
            Creates a custom speed <see cref="T:Rhein.Mods.Mod"/>.
            </summary>
            <param name="speed">The speed multiplier to use during gameplay.</param>
        </member>
        <member name="T:Rhein.Result">
            <summary>
            The status code <see cref="T:Rhein.Result"/> returned by a <see cref="N:Rhein"/> Engine function.
            </summary>
        </member>
        <member name="F:Rhein.Result.value">
            <summary>
            The code of the <see cref="T:Rhein.Result"/>.
            </summary>
        </member>
        <member name="F:Rhein.Result.ok">
            <summary>
            Gets if the <see cref="T:Rhein.Result"/> is equal to <see cref="F:Rhein.Result.Ok"/>.
            </summary>
        </member>
        <member name="M:Rhein.Result.op_Implicit(Rhein.Result)~System.Int32">
            <summary>
            Converts the <see cref="T:Rhein.Result"/> to an <see cref="T:System.Int32"/> code.
            </summary>
            <param name="res">The <see cref="T:Rhein.Result"/>.</param>
        </member>
        <member name="M:Rhein.Result.op_Implicit(Rhein.Result)~System.Boolean">
            <summary>
            Converts the <see cref="T:Rhein.Result"/> to a <see cref="T:System.Boolean"/> ok value.
            </summary>
            <param name="res">The <see cref="T:Rhein.Result"/>.</param>
        </member>
        <member name="M:Rhein.Result.op_Implicit(System.Int32)~Rhein.Result">
            <summary>
            Converts the <see cref="T:System.Int32"/> code to a <see cref="T:Rhein.Result"/>.
            </summary>
            <param name="code">The <see cref="T:System.Int32"/> code.</param>
        </member>
        <member name="M:Rhein.Result.op_Implicit(System.Boolean)~Rhein.Result">
            <summary>
            Converts the <see cref="T:System.Boolean"/> ok value to a <see cref="T:Rhein.Result"/>.
            </summary>
            <param name="ok">The <see cref="T:System.Boolean"/> ok value.</param>
        </member>
        <member name="M:Rhein.Result.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:Rhein.Result"/> from the <see cref="T:System.Int32"/> code.
            </summary>
            <param name="code">The <see cref="T:System.Int32"/> code.</param>
        </member>
        <member name="F:Rhein.Result.Unknown">
            <summary>Unknown <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="F:Rhein.Result.Ok">
            <summary>Ok <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="F:Rhein.Result.LowMemory">
            <summary>Low Memory <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="F:Rhein.Result.AlreadyStarted">
            <summary>Already Started <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="F:Rhein.Result.InvalidGamemode">
            <summary>Invalid Gamemode <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="F:Rhein.Result.Unity_OldInputSystem">
            <summary>Unity: Using Old Input Module <see cref="T:Rhein.Result"/>.</summary>
        </member>
        <member name="T:Rhein.RheinObject">
            <summary>
            The base class for most <see cref="N:Rhein"/> Engine classes.
            </summary>
        </member>
        <member name="T:Rhein.TimingWindows">
            <summary>
            <see cref="T:Rhein.Judgement"/> <see cref="T:Rhein.TimingWindows"/> for a <see cref="!:Gamemodes.Gamemode"/>.
            </summary>
        </member>
        <member name="F:Rhein.TimingWindows.Marvelous">
            <summary>The <see cref="F:Rhein.Judgement.Marvelous"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Perfect">
            <summary>The <see cref="F:Rhein.Judgement.Perfect"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Great">
            <summary>The <see cref="F:Rhein.Judgement.Great"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Good">
            <summary>The <see cref="F:Rhein.Judgement.Good"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Okay">
            <summary>The <see cref="F:Rhein.Judgement.Okay"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Miss">
            <summary>The <see cref="F:Rhein.Judgement.Miss"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.IsDefault">
            <summary>Gets if the <see cref="T:Rhein.TimingWindows"/> are the same as the <see cref="F:Rhein.TimingWindows.Default"/> windows.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultMarv">
            <summary>The default <see cref="F:Rhein.Judgement.Marvelous"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultPerf">
            <summary>The default <see cref="F:Rhein.Judgement.Perfect"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultGreat">
            <summary>The default <see cref="F:Rhein.Judgement.Great"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultGood">
            <summary>The default <see cref="F:Rhein.Judgement.Good"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultOkay">
            <summary>The default <see cref="F:Rhein.Judgement.Okay"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.DefaultMiss">
            <summary>The default <see cref="F:Rhein.Judgement.Miss"/> window.</summary>
        </member>
        <member name="F:Rhein.TimingWindows.Default">
            <summary>
            The default <see cref="T:Rhein.TimingWindows"/> used in <see cref="N:Rhein"/> Engine.
            </summary>
        </member>
        <member name="F:Rhein.TimingWindows.Chill">
            <summary>
            The chill <see cref="T:Rhein.TimingWindows"/> used in the <see cref="T:Rhein.Mods.ChillTimingMod"/>.
            </summary>
        </member>
        <member name="F:Rhein.TimingWindows.Lenient">
            <summary>
            The lenient <see cref="T:Rhein.TimingWindows"/> used in the <see cref="T:Rhein.Mods.LenientTimingMod"/>.
            </summary>
        </member>
        <member name="F:Rhein.TimingWindows.Tight">
            <summary>
            The tight <see cref="T:Rhein.TimingWindows"/> used in the <see cref="T:Rhein.Mods.TightTimingMod"/>.
            </summary>
        </member>
        <member name="F:Rhein.TimingWindows.Strict">
            <summary>
            The strict <see cref="T:Rhein.TimingWindows"/> used in the <see cref="T:Rhein.Mods.StrictTimingMod"/>.
            </summary>
        </member>
        <member name="M:Rhein.TimingWindows.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Rhein.TimingWindows"/> with the specified <see cref="T:Rhein.Judgement"/> windows.
            </summary>
            <param name="marv">The <see cref="F:Rhein.Judgement.Marvelous"/> window.</param>
            <param name="perf">The <see cref="F:Rhein.Judgement.Perfect"/> window.</param>
            <param name="great">The <see cref="F:Rhein.Judgement.Great"/> window.</param>
            <param name="good">The <see cref="F:Rhein.Judgement.Good"/> window.</param>
            <param name="okay">The <see cref="F:Rhein.Judgement.Okay"/> window.</param>
            <param name="miss">The <see cref="F:Rhein.Judgement.Miss"/> window.</param>
        </member>
    </members>
</doc>
